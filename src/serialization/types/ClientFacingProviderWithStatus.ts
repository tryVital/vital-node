/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vital from "../../api/index";
import * as core from "../../core";
import { ClientFacingConnectionErrorDetails } from "./ClientFacingConnectionErrorDetails";
import { ResourceAvailability } from "./ResourceAvailability";

export const ClientFacingProviderWithStatus: core.serialization.ObjectSchema<
    serializers.ClientFacingProviderWithStatus.Raw,
    Vital.ClientFacingProviderWithStatus
> = core.serialization.object({
    name: core.serialization.string(),
    slug: core.serialization.string(),
    logo: core.serialization.string(),
    createdOn: core.serialization.property("created_on", core.serialization.date()),
    status: core.serialization.string(),
    externalUserId: core.serialization.property("external_user_id", core.serialization.string().optional()),
    errorDetails: core.serialization.property("error_details", ClientFacingConnectionErrorDetails.optional()),
    resourceAvailability: core.serialization.property(
        "resource_availability",
        core.serialization.record(core.serialization.string(), ResourceAvailability)
    ),
});

export declare namespace ClientFacingProviderWithStatus {
    interface Raw {
        name: string;
        slug: string;
        logo: string;
        created_on: string;
        status: string;
        external_user_id?: string | null;
        error_details?: ClientFacingConnectionErrorDetails.Raw | null;
        resource_availability: Record<string, ResourceAvailability.Raw>;
    }
}
