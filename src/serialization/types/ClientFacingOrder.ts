/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vital from "../../api/index";
import * as core from "../../core";
import { ClientFacingPatientDetailsCompatible } from "./ClientFacingPatientDetailsCompatible";
import { PatientAddressCompatible } from "./PatientAddressCompatible";
import { ClientFacingLabTest } from "./ClientFacingLabTest";
import { ClientFacingOrderDetails } from "./ClientFacingOrderDetails";
import { ClientFacingOrderEvent } from "./ClientFacingOrderEvent";
import { OrderTopLevelStatus } from "./OrderTopLevelStatus";
import { ClientFacingPhysician } from "./ClientFacingPhysician";
import { ShippingAddress } from "./ShippingAddress";
import { Billing } from "./Billing";
import { Interpretation } from "./Interpretation";

export const ClientFacingOrder: core.serialization.ObjectSchema<
    serializers.ClientFacingOrder.Raw,
    Vital.ClientFacingOrder
> = core.serialization.object({
    userId: core.serialization.property("user_id", core.serialization.string()),
    id: core.serialization.string(),
    teamId: core.serialization.property("team_id", core.serialization.string()),
    patientDetails: core.serialization.property("patient_details", ClientFacingPatientDetailsCompatible.optional()),
    patientAddress: core.serialization.property("patient_address", PatientAddressCompatible.optional()),
    labTest: core.serialization.property("lab_test", ClientFacingLabTest),
    details: ClientFacingOrderDetails,
    sampleId: core.serialization.property("sample_id", core.serialization.string().optional()),
    notes: core.serialization.string().optional(),
    createdAt: core.serialization.property("created_at", core.serialization.date()),
    updatedAt: core.serialization.property("updated_at", core.serialization.date()),
    events: core.serialization.list(ClientFacingOrderEvent),
    status: OrderTopLevelStatus.optional(),
    physician: ClientFacingPhysician.optional(),
    healthInsuranceId: core.serialization.property("health_insurance_id", core.serialization.string().optional()),
    requisitionFormUrl: core.serialization.property("requisition_form_url", core.serialization.string().optional()),
    priority: core.serialization.boolean().optional(),
    shippingDetails: core.serialization.property("shipping_details", ShippingAddress.optional()),
    activateBy: core.serialization.property("activate_by", core.serialization.string().optional()),
    passthrough: core.serialization.string().optional(),
    billingType: core.serialization.property("billing_type", Billing.optional()),
    icdCodes: core.serialization.property("icd_codes", core.serialization.list(core.serialization.string()).optional()),
    hasAbn: core.serialization.property("has_abn", core.serialization.boolean()),
    interpretation: Interpretation.optional(),
    expectedResultByDate: core.serialization.property(
        "expected_result_by_date",
        core.serialization.string().optional()
    ),
    worstCaseResultByDate: core.serialization.property(
        "worst_case_result_by_date",
        core.serialization.string().optional()
    ),
});

export declare namespace ClientFacingOrder {
    interface Raw {
        user_id: string;
        id: string;
        team_id: string;
        patient_details?: ClientFacingPatientDetailsCompatible.Raw | null;
        patient_address?: PatientAddressCompatible.Raw | null;
        lab_test: ClientFacingLabTest.Raw;
        details: ClientFacingOrderDetails.Raw;
        sample_id?: string | null;
        notes?: string | null;
        created_at: string;
        updated_at: string;
        events: ClientFacingOrderEvent.Raw[];
        status?: OrderTopLevelStatus.Raw | null;
        physician?: ClientFacingPhysician.Raw | null;
        health_insurance_id?: string | null;
        requisition_form_url?: string | null;
        priority?: boolean | null;
        shipping_details?: ShippingAddress.Raw | null;
        activate_by?: string | null;
        passthrough?: string | null;
        billing_type?: Billing.Raw | null;
        icd_codes?: string[] | null;
        has_abn: boolean;
        interpretation?: Interpretation.Raw | null;
        expected_result_by_date?: string | null;
        worst_case_result_by_date?: string | null;
    }
}
