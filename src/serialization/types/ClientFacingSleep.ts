/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vital from "../../api/index";
import * as core from "../../core";
import { SleepType } from "./SleepType";
import { SleepSummaryState } from "./SleepSummaryState";
import { ClientFacingSource } from "./ClientFacingSource";
import { ClientFacingSleepStream } from "./ClientFacingSleepStream";

export const ClientFacingSleep: core.serialization.ObjectSchema<
    serializers.ClientFacingSleep.Raw,
    Vital.ClientFacingSleep
> = core.serialization.object({
    userId: core.serialization.property("user_id", core.serialization.string()),
    id: core.serialization.string(),
    date: core.serialization.date(),
    calendarDate: core.serialization.property("calendar_date", core.serialization.string()),
    bedtimeStart: core.serialization.property("bedtime_start", core.serialization.date()),
    bedtimeStop: core.serialization.property("bedtime_stop", core.serialization.date()),
    type: SleepType,
    timezoneOffset: core.serialization.property("timezone_offset", core.serialization.number().optional()),
    duration: core.serialization.number(),
    total: core.serialization.number(),
    awake: core.serialization.number(),
    light: core.serialization.number(),
    rem: core.serialization.number(),
    deep: core.serialization.number(),
    score: core.serialization.number().optional(),
    hrLowest: core.serialization.property("hr_lowest", core.serialization.number().optional()),
    hrAverage: core.serialization.property("hr_average", core.serialization.number().optional()),
    hrResting: core.serialization.property("hr_resting", core.serialization.number().optional()),
    efficiency: core.serialization.number().optional(),
    latency: core.serialization.number().optional(),
    temperatureDelta: core.serialization.property("temperature_delta", core.serialization.number().optional()),
    skinTemperature: core.serialization.property("skin_temperature", core.serialization.number().optional()),
    hrDip: core.serialization.property("hr_dip", core.serialization.number().optional()),
    state: SleepSummaryState.optional(),
    averageHrv: core.serialization.property("average_hrv", core.serialization.number().optional()),
    respiratoryRate: core.serialization.property("respiratory_rate", core.serialization.number().optional()),
    source: ClientFacingSource,
    sleepStream: core.serialization.property("sleep_stream", ClientFacingSleepStream.optional()),
});

export declare namespace ClientFacingSleep {
    interface Raw {
        user_id: string;
        id: string;
        date: string;
        calendar_date: string;
        bedtime_start: string;
        bedtime_stop: string;
        type: SleepType.Raw;
        timezone_offset?: number | null;
        duration: number;
        total: number;
        awake: number;
        light: number;
        rem: number;
        deep: number;
        score?: number | null;
        hr_lowest?: number | null;
        hr_average?: number | null;
        hr_resting?: number | null;
        efficiency?: number | null;
        latency?: number | null;
        temperature_delta?: number | null;
        skin_temperature?: number | null;
        hr_dip?: number | null;
        state?: SleepSummaryState.Raw | null;
        average_hrv?: number | null;
        respiratory_rate?: number | null;
        source: ClientFacingSource.Raw;
        sleep_stream?: ClientFacingSleepStream.Raw | null;
    }
}
