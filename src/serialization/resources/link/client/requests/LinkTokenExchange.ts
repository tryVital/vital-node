/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Vital from "../../../../../api/index";
import * as core from "../../../../../core";
import { Providers } from "../../../../types/Providers";

export const LinkTokenExchange: core.serialization.Schema<serializers.LinkTokenExchange.Raw, Vital.LinkTokenExchange> =
    core.serialization.object({
        userId: core.serialization.property("user_id", core.serialization.string()),
        provider: Providers.optional(),
        redirectUrl: core.serialization.property("redirect_url", core.serialization.string().optional()),
        filterOnProviders: core.serialization.property(
            "filter_on_providers",
            core.serialization.list(Providers).optional()
        ),
        onError: core.serialization.property("on_error", core.serialization.stringLiteral("redirect").optional()),
        onClose: core.serialization.property("on_close", core.serialization.stringLiteral("redirect").optional()),
    });

export declare namespace LinkTokenExchange {
    interface Raw {
        user_id: string;
        provider?: Providers.Raw | null;
        redirect_url?: string | null;
        filter_on_providers?: Providers.Raw[] | null;
        on_error?: "redirect" | null;
        on_close?: "redirect" | null;
    }
}
