/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Vital from "../../../../../api/index";
import * as core from "../../../../../core";
import { OrderSetRequest } from "../../../../types/OrderSetRequest";
import { LabTestCollectionMethod } from "../../../../types/LabTestCollectionMethod";
import { PhysicianCreateRequest } from "../../../../types/PhysicianCreateRequest";
import { HealthInsuranceCreateRequest } from "../../../../types/HealthInsuranceCreateRequest";
import { Billing } from "../../../../types/Billing";
import { Consent } from "../../../../types/Consent";
import { AoEAnswer } from "../../../../types/AoEAnswer";
import { PatientDetailsWithValidation } from "../../../../types/PatientDetailsWithValidation";
import { PatientAddressWithValidation } from "../../../../types/PatientAddressWithValidation";

export const CreateOrderRequestCompatible: core.serialization.Schema<
    serializers.CreateOrderRequestCompatible.Raw,
    Omit<Vital.CreateOrderRequestCompatible, "idempotencyKey">
> = core.serialization.object({
    userId: core.serialization.property("user_id", core.serialization.string()),
    labTestId: core.serialization.property("lab_test_id", core.serialization.string().optional()),
    orderSet: core.serialization.property("order_set", OrderSetRequest.optional()),
    collectionMethod: core.serialization.property("collection_method", LabTestCollectionMethod.optional()),
    physician: PhysicianCreateRequest.optional(),
    healthInsurance: core.serialization.property("health_insurance", HealthInsuranceCreateRequest.optional()),
    priority: core.serialization.boolean().optional(),
    billingType: core.serialization.property("billing_type", Billing.optional()),
    icdCodes: core.serialization.property("icd_codes", core.serialization.list(core.serialization.string()).optional()),
    consents: core.serialization.list(Consent).optional(),
    activateBy: core.serialization.property("activate_by", core.serialization.string().optional()),
    aoeAnswers: core.serialization.property("aoe_answers", core.serialization.list(AoEAnswer).optional()),
    passthrough: core.serialization.string().optional(),
    labAccountId: core.serialization.property("lab_account_id", core.serialization.string().optional()),
    creatorMemberId: core.serialization.property("creator_member_id", core.serialization.string().optional()),
    patientDetails: core.serialization.property("patient_details", PatientDetailsWithValidation),
    patientAddress: core.serialization.property("patient_address", PatientAddressWithValidation),
});

export declare namespace CreateOrderRequestCompatible {
    interface Raw {
        user_id: string;
        lab_test_id?: string | null;
        order_set?: OrderSetRequest.Raw | null;
        collection_method?: LabTestCollectionMethod.Raw | null;
        physician?: PhysicianCreateRequest.Raw | null;
        health_insurance?: HealthInsuranceCreateRequest.Raw | null;
        priority?: boolean | null;
        billing_type?: Billing.Raw | null;
        icd_codes?: string[] | null;
        consents?: Consent.Raw[] | null;
        activate_by?: string | null;
        aoe_answers?: AoEAnswer.Raw[] | null;
        passthrough?: string | null;
        lab_account_id?: string | null;
        creator_member_id?: string | null;
        patient_details: PatientDetailsWithValidation.Raw;
        patient_address: PatientAddressWithValidation.Raw;
    }
}
